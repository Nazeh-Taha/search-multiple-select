{"version":3,"sources":["../../src/state/actions.js","../../src/index.js","../../src/state/reducer.js","App.js","index.js"],"names":["MultipleSelectActions","prevState","action","id","newArray","option","check","initOptions","searchOptionResult","searchText","item","searchItems","searchValue","value","MultipleSelect","options","getOptionsData","useReducer","MultipleSelectReducer","state","dispatch","useEffect","type","data","className","styles","container","placeholder","onChange","e","optionsContainer","style","color","onClick","App","ReactDOM","render","document","getElementById"],"mappings":"0iBAAO,IAAMA,EAAwB,SAACC,EAAWC,GAC7C,OAAQA,EAAR,MACI,oBACI,IAAIC,EAAJ,EAEMC,EAAWF,EAAA,UAAgB,SAAAG,GAE7B,MAAQ,CAAEF,KADVA,EACkBE,OAAV,EAA0BC,OAAO,MAG7C,eAEIC,YAFJ,EAGIC,mBAAoBJ,IAE5B,8BAEI,IAAMK,EAAaP,QAAnB,cAaA,eAEIM,mBAXJ,EACkB,UAAIP,EAAJ,4BAAyC,SAAAS,GAEnD,OAAOA,kCAAP,MAIUT,EAAdU,YAKAC,YAAaV,EAAOW,QAE5B,uBAEI,eAEIL,mBAAoBP,EAAA,wBAAiC,SAAAS,GACjD,OAAIA,OAAYR,EAAhB,GACG,QAAiBI,OAAQI,EAAKJ,QAE7B,KAGRC,YAAaN,EAAA,iBAA0B,SAAAS,GACnC,OAAIA,OAAYR,EAAhB,GACG,QAAiBI,OAAQI,EAAKJ,QAE7B,OAKhB,QACI,MAAO,CACHL,eCpDHa,EAAiB,SAAC,GAAmD,QAAjDC,eAAiD,MAAvC,CAAC,IAAsC,MAAjCC,sBAAiC,MAAhB,aAAgB,ICO7C,WAAM,MACbC,qBAAWjB,EAAuB,CACxDY,YADwD,GAExDL,YAFwD,GAGxDC,mBAAoB,KAGxB,MAAO,CAPgC,WDLfU,GAAnBC,EAFyE,KAElEC,EAFkE,KAiBhF,OAZAC,qBAAU,WAGND,EAAS,CAAEE,KAAF,gBAAyBC,KAAMR,MAH5CM,IAQAA,qBAAU,WACRL,EAAeG,EAAfH,eACC,CAACG,EAFJE,cAOE,yBAAKG,UAAWC,EAAOC,WACrB,2BAAOJ,KAAP,OAAmBT,MAAOM,EAA1B,YAA6CK,UAAWC,EAAxD,YACEE,YADF,mBAEEC,SAAU,mBAAOR,EAAS,CAAEE,KAAF,0BAAmCT,MAAOgB,SAAShB,WAE/E,yBAAKW,UAAWC,EAAOK,kBACpBX,EAAA,wBAA6B,SAAAd,GAAM,OAElC,yBAAKmB,UAAWC,EAAhB,gBAAwCM,MAAO1B,EAAA,MAAe,CAAE2B,MAAO,WAAvE,GACEC,QAAS,WACPb,EAAS,CAAEE,KAAF,mBAA4BnB,GAAIE,EAAOF,OAElD,2BAAIE,EAJN,QAKGA,QACC,6BADDA,WAEC,6BAPJ,iB,MExBK6B,MAJH,IACH,kBAAC,EAAD,CAAgBnB,QAAS,CAAC,IAAKC,eAAgB,SCAxDmB,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.d013ba4d.chunk.js","sourcesContent":["export const MultipleSelectActions = (prevState, action) => {\r\n    switch (action.type) {\r\n        case 'createOptions': // handle create the first array of options\r\n            let id = 0;\r\n            //Create new array and add check property\r\n            const newArray = action.data.map(option => {\r\n                id++;\r\n                return ({ id: id, option: option, check: false }\r\n                )\r\n            });\r\n            return {\r\n                ...prevState,\r\n                initOptions: newArray,\r\n                searchOptionResult: newArray\r\n            }\r\n        case 'handleChangeSearchValue': // handle filter country by search input\r\n            // change letters to capital letter \r\n            const searchText = action.value.toUpperCase();\r\n            // filter array by search input text\r\n            let searchItems = [];\r\n\r\n            if (searchText) {//if text not empty\r\n                searchItems = [...prevState.searchOptionResult].filter(item => {\r\n                    //return result fined\r\n                    return item.option.toUpperCase().startsWith(searchText);\r\n                });\r\n            } else {\r\n                //return all options\r\n                searchItems = prevState.initOptions\r\n            }\r\n            return {\r\n                ...prevState,\r\n                searchOptionResult: searchItems,\r\n                searchValue: action.value\r\n            }\r\n        case 'handleClickEvent':\r\n            //handle change status to option when click\r\n            return{\r\n                ...prevState,\r\n                searchOptionResult: prevState.searchOptionResult.map(item => {\r\n                    if (item.id === action.id){\r\n                       return {...item, check: !item.check}\r\n                    }else{\r\n                        return item\r\n                    }\r\n                }),\r\n                initOptions: prevState.initOptions.map(item => {\r\n                    if (item.id === action.id){\r\n                       return {...item, check: !item.check}\r\n                    }else{\r\n                        return item\r\n                    }\r\n                })\r\n            }\r\n           \r\n        default:\r\n            return {\r\n                prevState\r\n            }\r\n\r\n    }\r\n}","import React, { useEffect } from 'react'\nimport styles from './styles.module.css'\nimport { MultipleSelectReducer } from './state/reducer';\n\n\nexport const MultipleSelect = ({ options = [''], getOptionsData = () => { } }) => {\n\n  const [state, dispatch] = MultipleSelectReducer();\n\n\n  useEffect(() => {\n    // change array of string to array of object\n    (() => {\n      dispatch({ type: 'createOptions', data: options })\n    })()\n\n  }, []);\n//send the data to parent component\n  useEffect(() => {\n    getOptionsData(state.initOptions)\n  }, [state.initOptions]);\n\n  return (\n\n    // Component container\n    <div className={styles.container}>\n      <input type=\"text\" value={state.searchValue} className={styles.searchInput}\n        placeholder=\"Search questions\"\n        onChange={(e) => dispatch({ type: 'handleChangeSearchValue', value: e.target.value })} />\n      {/*---------------------------------------- options Container-------------------------------------------------- */}\n      <div className={styles.optionsContainer}>\n        {state.searchOptionResult.map(option => (\n          //---------------------------------------- option Container--------------------------------------------------\n          <div className={styles.optionContainer} style={option.check ? { color: '#807f7f' } : {}}\n            onClick={() => {\n              dispatch({ type: 'handleClickEvent', id: option.id });\n            }}>\n            <p>{option.option}</p>\n            {option.check ?\n              <div> &#10003;</div> :\n              <div>&#10011;</div>}\n          </div>\n        ))}\n      </div>\n    </div>\n  )\n}\n","import {\r\n    useReducer\r\n} from 'react';\r\n\r\nimport { MultipleSelectActions } from './actions';\r\n/**\r\n * MultipleSelectReducer\r\n * @returns {[{\r\n * }},\r\n * React.DispatchWithoutAction\r\n * ]}\r\n */\r\nexport const MultipleSelectReducer = () => {\r\n    const [state, dispatch] = useReducer(MultipleSelectActions, {\r\n        searchValue: '',\r\n        initOptions: [],\r\n        searchOptionResult: []\r\n    });\r\n\r\n    return [state, dispatch];\r\n}","import React from 'react'\n\nimport { MultipleSelect } from 'search-multiple-select'\nimport 'search-multiple-select/dist/index.css'\n\nconst App = () => {\n  return <MultipleSelect options={['']} getOptionsData={() => {}}/>\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}